{
    "sourceFile": "src/hooks/useOAuthState.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1754493709089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754494669472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,13 @@\n import { useState, useCallback, useEffect } from 'react';\n-import { OAuthTokens } from '../types/oauth-core';\n+import { OAuthResult } from '@zestic/oauth-core';\n \n+interface OAuthTokens {\n+  accessToken: string;\n+  refreshToken?: string;\n+  expiresIn?: number;\n+}\n+\n interface OAuthState {\n   isAuthenticated: boolean;\n   tokens: OAuthTokens | null;\n   isLoading: boolean;\n@@ -9,8 +15,9 @@\n }\n \n interface UseOAuthStateResult extends OAuthState {\n   setTokens: (tokens: OAuthTokens | null) => void;\n+  setResult: (result: OAuthResult) => void;\n   setLoading: (loading: boolean) => void;\n   setError: (error: string | null) => void;\n   clearState: () => void;\n }\n"
                },
                {
                    "date": 1754494684123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,25 @@\n       error: null,\n     }));\n   }, []);\n \n+  const setResult = useCallback((result: OAuthResult) => {\n+    if (result.success && result.accessToken) {\n+      const tokens: OAuthTokens = {\n+        accessToken: result.accessToken,\n+        refreshToken: result.refreshToken,\n+        expiresIn: result.expiresIn,\n+      };\n+      setTokens(tokens);\n+    } else {\n+      setState(current => ({\n+        ...current,\n+        error: result.error || 'Authentication failed',\n+        isLoading: false,\n+      }));\n+    }\n+  }, [setTokens]);\n+\n   const setLoading = useCallback((isLoading: boolean) => {\n     setState(current => ({\n       ...current,\n       isLoading,\n"
                },
                {
                    "date": 1754494694475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,8 +92,9 @@\n \n   return {\n     ...state,\n     setTokens,\n+    setResult,\n     setLoading,\n     setError,\n     clearState,\n   };\n"
                }
            ],
            "date": 1754493709089,
            "name": "Commit-0",
            "content": "import { useState, useCallback, useEffect } from 'react';\nimport { OAuthTokens } from '../types/oauth-core';\n\ninterface OAuthState {\n  isAuthenticated: boolean;\n  tokens: OAuthTokens | null;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface UseOAuthStateResult extends OAuthState {\n  setTokens: (tokens: OAuthTokens | null) => void;\n  setLoading: (loading: boolean) => void;\n  setError: (error: string | null) => void;\n  clearState: () => void;\n}\n\n/**\n * React hook for managing OAuth authentication state\n * Provides centralized state management for OAuth tokens and authentication status\n */\nexport function useOAuthState(): UseOAuthStateResult {\n  const [state, setState] = useState<OAuthState>({\n    isAuthenticated: false,\n    tokens: null,\n    isLoading: false,\n    error: null,\n  });\n\n  const setTokens = useCallback((tokens: OAuthTokens | null) => {\n    setState(current => ({\n      ...current,\n      tokens,\n      isAuthenticated: !!tokens,\n      error: null,\n    }));\n  }, []);\n\n  const setLoading = useCallback((isLoading: boolean) => {\n    setState(current => ({\n      ...current,\n      isLoading,\n    }));\n  }, []);\n\n  const setError = useCallback((error: string | null) => {\n    setState(current => ({\n      ...current,\n      error,\n      isLoading: false,\n    }));\n  }, []);\n\n  const clearState = useCallback(() => {\n    setState({\n      isAuthenticated: false,\n      tokens: null,\n      isLoading: false,\n      error: null,\n    });\n  }, []);\n\n  // Check for existing tokens on mount\n  useEffect(() => {\n    // Implementation will check localStorage for existing tokens\n    // This will be implemented in Phase 2\n  }, []);\n\n  return {\n    ...state,\n    setTokens,\n    setLoading,\n    setError,\n    clearState,\n  };\n}\n"
        }
    ]
}