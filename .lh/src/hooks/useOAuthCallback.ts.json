{
    "sourceFile": "src/hooks/useOAuthCallback.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1754493689932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754494639932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useState, useCallback } from 'react';\n-import { OAuthConfig } from '../types/oauth-core';\n+import { OAuthConfig } from '@zestic/oauth-core';\n import { ReactOAuthAdapter } from '../ReactOAuthAdapter';\n \n interface UseOAuthCallbackResult {\n   status: 'processing' | 'success' | 'error';\n@@ -24,19 +24,19 @@\n       setMessage('Processing OAuth callback...');\n       setError(null);\n \n       const adapter = new ReactOAuthAdapter(config);\n-      \n+\n       // Extract URL parameters\n       const urlParams = new URLSearchParams(window.location.search);\n       const params = Object.fromEntries(urlParams.entries());\n-      \n+\n       const result = await adapter.handleCallback(params);\n \n       if (result.success) {\n         setStatus('success');\n         setMessage('OAuth authentication successful!');\n-        \n+\n         // Navigate to main app after delay\n         setTimeout(() => {\n           window.location.href = '/';\n         }, 1500);\n"
                },
                {
                    "date": 1754494723630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,11 +27,10 @@\n       const adapter = new ReactOAuthAdapter(config);\n \n       // Extract URL parameters\n       const urlParams = new URLSearchParams(window.location.search);\n-      const params = Object.fromEntries(urlParams.entries());\n \n-      const result = await adapter.handleCallback(params);\n+      const result = await adapter.handleCallback(urlParams);\n \n       if (result.success) {\n         setStatus('success');\n         setMessage('OAuth authentication successful!');\n"
                },
                {
                    "date": 1754498174167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,67 @@\n+import { useState, useCallback, useEffect } from 'react';\n+import { OAuthConfig, OAuthResult } from '@zestic/oauth-core';\n+import { ReactOAuthAdapter } from '../ReactOAuthAdapter';\n+import { ParameterExtractor, BrowserParameterExtractor } from '../types/NavigationTypes';\n+\n+export interface UseOAuthCallbackOptions {\n+  onSuccess?: (result: OAuthResult) => void;\n+  onError?: (error: Error) => void;\n+  autoStart?: boolean;\n+  parameterExtractor?: ParameterExtractor;\n+}\n+\n+export interface UseOAuthCallbackResult {\n+  status: 'processing' | 'success' | 'error';\n+  message: string;\n+  error: string | null;\n+  handleCallback: () => Promise<void>;\n+  retry: () => void;\n+}\n+\n+/**\n+ * React hook for handling OAuth callback\n+ * Manages the OAuth callback flow state and provides callback handling function\n+ */\n+export function useOAuthCallback(config: OAuthConfig): UseOAuthCallbackResult {\n+  const [status, setStatus] = useState<'processing' | 'success' | 'error'>('processing');\n+  const [message, setMessage] = useState('Processing OAuth callback...');\n+  const [error, setError] = useState<string | null>(null);\n+\n+  const handleCallback = useCallback(async () => {\n+    try {\n+      setStatus('processing');\n+      setMessage('Processing OAuth callback...');\n+      setError(null);\n+\n+      const adapter = new ReactOAuthAdapter(config);\n+\n+      // Extract URL parameters\n+      const urlParams = new URLSearchParams(window.location.search);\n+\n+      const result = await adapter.handleCallback(urlParams);\n+\n+      if (result.success) {\n+        setStatus('success');\n+        setMessage('OAuth authentication successful!');\n+\n+        // Navigate to main app after delay\n+        setTimeout(() => {\n+          window.location.href = '/';\n+        }, 1500);\n+      } else {\n+        throw new Error(result.error || 'OAuth authentication failed');\n+      }\n+    } catch (err) {\n+      setStatus('error');\n+      setError(err instanceof Error ? err.message : 'Unknown error occurred');\n+      setMessage('OAuth authentication failed');\n+    }\n+  }, [config]);\n+\n+  return {\n+    status,\n+    message,\n+    error,\n+    handleCallback,\n+  };\n+}\n"
                },
                {
                    "date": 1754498186718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,12 +18,16 @@\n   retry: () => void;\n }\n \n /**\n- * React hook for handling OAuth callback\n- * Manages the OAuth callback flow state and provides callback handling function\n+ * React hook for handling OAuth callback processing\n+ * Manages the OAuth callback flow state and provides handlers\n+ * Follows oauth-expo pattern with callback-based navigation\n  */\n-export function useOAuthCallback(config: OAuthConfig): UseOAuthCallbackResult {\n+export function useOAuthCallback(\n+  config: OAuthConfig,\n+  options?: UseOAuthCallbackOptions\n+): UseOAuthCallbackResult {\n   const [status, setStatus] = useState<'processing' | 'success' | 'error'>('processing');\n   const [message, setMessage] = useState('Processing OAuth callback...');\n   const [error, setError] = useState<string | null>(null);\n \n@@ -64,62 +68,4 @@\n     error,\n     handleCallback,\n   };\n }\n-import { useState, useCallback } from 'react';\n-import { OAuthConfig } from '@zestic/oauth-core';\n-import { ReactOAuthAdapter } from '../ReactOAuthAdapter';\n-\n-interface UseOAuthCallbackResult {\n-  status: 'processing' | 'success' | 'error';\n-  message: string;\n-  error: string | null;\n-  handleCallback: () => Promise<void>;\n-}\n-\n-/**\n- * React hook for handling OAuth callback\n- * Manages the OAuth callback flow state and provides callback handling function\n- */\n-export function useOAuthCallback(config: OAuthConfig): UseOAuthCallbackResult {\n-  const [status, setStatus] = useState<'processing' | 'success' | 'error'>('processing');\n-  const [message, setMessage] = useState('Processing OAuth callback...');\n-  const [error, setError] = useState<string | null>(null);\n-\n-  const handleCallback = useCallback(async () => {\n-    try {\n-      setStatus('processing');\n-      setMessage('Processing OAuth callback...');\n-      setError(null);\n-\n-      const adapter = new ReactOAuthAdapter(config);\n-\n-      // Extract URL parameters\n-      const urlParams = new URLSearchParams(window.location.search);\n-\n-      const result = await adapter.handleCallback(urlParams);\n-\n-      if (result.success) {\n-        setStatus('success');\n-        setMessage('OAuth authentication successful!');\n-\n-        // Navigate to main app after delay\n-        setTimeout(() => {\n-          window.location.href = '/';\n-        }, 1500);\n-      } else {\n-        throw new Error(result.error || 'OAuth authentication failed');\n-      }\n-    } catch (err) {\n-      setStatus('error');\n-      setError(err instanceof Error ? err.message : 'Unknown error occurred');\n-      setMessage('OAuth authentication failed');\n-    }\n-  }, [config]);\n-\n-  return {\n-    status,\n-    message,\n-    error,\n-    handleCallback,\n-  };\n-}\n"
                },
                {
                    "date": 1754498203373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,38 +30,39 @@\n   const [status, setStatus] = useState<'processing' | 'success' | 'error'>('processing');\n   const [message, setMessage] = useState('Processing OAuth callback...');\n   const [error, setError] = useState<string | null>(null);\n \n-  const handleCallback = useCallback(async () => {\n+  const handleCallback = useCallback(async (): Promise<void> => {\n     try {\n       setStatus('processing');\n       setMessage('Processing OAuth callback...');\n       setError(null);\n \n       const adapter = new ReactOAuthAdapter(config);\n \n-      // Extract URL parameters\n-      const urlParams = new URLSearchParams(window.location.search);\n+      // Use pluggable parameter extractor or default to browser\n+      const parameterExtractor = options?.parameterExtractor || new BrowserParameterExtractor();\n+      const urlParams = parameterExtractor.getSearchParams();\n \n       const result = await adapter.handleCallback(urlParams);\n \n       if (result.success) {\n         setStatus('success');\n-        setMessage('OAuth authentication successful!');\n-\n-        // Navigate to main app after delay\n-        setTimeout(() => {\n-          window.location.href = '/';\n-        }, 1500);\n+        setMessage('Authentication successful');\n+        options?.onSuccess?.(result);\n       } else {\n         throw new Error(result.error || 'OAuth authentication failed');\n       }\n     } catch (err) {\n       setStatus('error');\n-      setError(err instanceof Error ? err.message : 'Unknown error occurred');\n+      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n+      setError(errorMessage);\n       setMessage('OAuth authentication failed');\n+      options?.onError?.(\n+        err instanceof Error ? err : new Error(errorMessage)\n+      );\n     }\n-  }, [config]);\n+  }, [config, options]);\n \n   return {\n     status,\n     message,\n"
                },
                {
                    "date": 1754498214364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,84 @@\n+import { useState, useCallback, useEffect } from 'react';\n+import { OAuthConfig, OAuthResult } from '@zestic/oauth-core';\n+import { ReactOAuthAdapter } from '../ReactOAuthAdapter';\n+import { ParameterExtractor, BrowserParameterExtractor } from '../types/NavigationTypes';\n+\n+export interface UseOAuthCallbackOptions {\n+  onSuccess?: (result: OAuthResult) => void;\n+  onError?: (error: Error) => void;\n+  autoStart?: boolean;\n+  parameterExtractor?: ParameterExtractor;\n+}\n+\n+export interface UseOAuthCallbackResult {\n+  status: 'processing' | 'success' | 'error';\n+  message: string;\n+  error: string | null;\n+  handleCallback: () => Promise<void>;\n+  retry: () => void;\n+}\n+\n+/**\n+ * React hook for handling OAuth callback processing\n+ * Manages the OAuth callback flow state and provides handlers\n+ * Follows oauth-expo pattern with callback-based navigation\n+ */\n+export function useOAuthCallback(\n+  config: OAuthConfig,\n+  options?: UseOAuthCallbackOptions\n+): UseOAuthCallbackResult {\n+  const [status, setStatus] = useState<'processing' | 'success' | 'error'>('processing');\n+  const [message, setMessage] = useState('Processing OAuth callback...');\n+  const [error, setError] = useState<string | null>(null);\n+\n+  const handleCallback = useCallback(async (): Promise<void> => {\n+    try {\n+      setStatus('processing');\n+      setMessage('Processing OAuth callback...');\n+      setError(null);\n+\n+      const adapter = new ReactOAuthAdapter(config);\n+\n+      // Use pluggable parameter extractor or default to browser\n+      const parameterExtractor = options?.parameterExtractor || new BrowserParameterExtractor();\n+      const urlParams = parameterExtractor.getSearchParams();\n+\n+      const result = await adapter.handleCallback(urlParams);\n+\n+      if (result.success) {\n+        setStatus('success');\n+        setMessage('Authentication successful');\n+        options?.onSuccess?.(result);\n+      } else {\n+        throw new Error(result.error || 'OAuth authentication failed');\n+      }\n+    } catch (err) {\n+      setStatus('error');\n+      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';\n+      setError(errorMessage);\n+      setMessage('OAuth authentication failed');\n+      options?.onError?.(\n+        err instanceof Error ? err : new Error(errorMessage)\n+      );\n+    }\n+  }, [config, options]);\n+\n+  const retry = useCallback(() => {\n+    handleCallback();\n+  }, [handleCallback]);\n+\n+  // Auto-start if enabled (default: true)\n+  useEffect(() => {\n+    if (options?.autoStart !== false) {\n+      handleCallback();\n+    }\n+  }, [handleCallback, options?.autoStart]);\n+\n+  return {\n+    status,\n+    message,\n+    error,\n+    handleCallback,\n+    retry,\n+  };\n+}\n"
                }
            ],
            "date": 1754493689932,
            "name": "Commit-0",
            "content": "import { useState, useCallback } from 'react';\nimport { OAuthConfig } from '../types/oauth-core';\nimport { ReactOAuthAdapter } from '../ReactOAuthAdapter';\n\ninterface UseOAuthCallbackResult {\n  status: 'processing' | 'success' | 'error';\n  message: string;\n  error: string | null;\n  handleCallback: () => Promise<void>;\n}\n\n/**\n * React hook for handling OAuth callback\n * Manages the OAuth callback flow state and provides callback handling function\n */\nexport function useOAuthCallback(config: OAuthConfig): UseOAuthCallbackResult {\n  const [status, setStatus] = useState<'processing' | 'success' | 'error'>('processing');\n  const [message, setMessage] = useState('Processing OAuth callback...');\n  const [error, setError] = useState<string | null>(null);\n\n  const handleCallback = useCallback(async () => {\n    try {\n      setStatus('processing');\n      setMessage('Processing OAuth callback...');\n      setError(null);\n\n      const adapter = new ReactOAuthAdapter(config);\n      \n      // Extract URL parameters\n      const urlParams = new URLSearchParams(window.location.search);\n      const params = Object.fromEntries(urlParams.entries());\n      \n      const result = await adapter.handleCallback(params);\n\n      if (result.success) {\n        setStatus('success');\n        setMessage('OAuth authentication successful!');\n        \n        // Navigate to main app after delay\n        setTimeout(() => {\n          window.location.href = '/';\n        }, 1500);\n      } else {\n        throw new Error(result.error || 'OAuth authentication failed');\n      }\n    } catch (err) {\n      setStatus('error');\n      setError(err instanceof Error ? err.message : 'Unknown error occurred');\n      setMessage('OAuth authentication failed');\n    }\n  }, [config]);\n\n  return {\n    status,\n    message,\n    error,\n    handleCallback,\n  };\n}\n"
        }
    ]
}