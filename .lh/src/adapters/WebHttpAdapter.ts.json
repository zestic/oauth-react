{
    "sourceFile": "src/adapters/WebHttpAdapter.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1754493656541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1754494571569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,57 @@\n-import { HttpAdapter, HttpRequest, HttpResponse } from '../types/oauth-core';\n+import { HttpAdapter, HttpResponse } from '@zestic/oauth-core';\n \n /**\n  * Web HTTP adapter using fetch API\n  * Implements the HttpAdapter interface for browser environments\n  */\n export class WebHttpAdapter implements HttpAdapter {\n-  async request(request: HttpRequest): Promise<HttpResponse> {\n+  async post(\n+    url: string,\n+    data: Record<string, unknown>,\n+    headers?: Record<string, string>\n+  ): Promise<HttpResponse> {\n     try {\n-      const response = await fetch(request.url, {\n-        method: request.method,\n-        headers: request.headers,\n-        body: request.body,\n+      const response = await fetch(url, {\n+        method: 'POST',\n+        headers: {\n+          'Content-Type': 'application/x-www-form-urlencoded',\n+          ...headers,\n+        },\n+        body: new URLSearchParams(data as Record<string, string>).toString(),\n       });\n \n+      const responseData = await response.json().catch(() => ({}));\n+\n+      return {\n+        status: response.status,\n+        data: responseData,\n+        headers: Object.fromEntries(response.headers.entries()),\n+      };\n+    } catch (error) {\n+      throw new Error(\n+        `Network request failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n+      );\n+    }\n+  }\n+\n+  async get(url: string, headers?: Record<string, string>): Promise<HttpResponse> {\n+    try {\n+      const response = await fetch(url, {\n+        method: 'GET',\n+        headers,\n+      });\n+\n       const data = await response.json().catch(() => ({}));\n \n       return {\n         status: response.status,\n-        statusText: response.statusText,\n+        data,\n         headers: Object.fromEntries(response.headers.entries()),\n-        data,\n-        ok: response.ok,\n       };\n     } catch (error) {\n-      throw new Error(`Network request failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n+      throw new Error(\n+        `Network request failed: ${error instanceof Error ? error.message : 'Unknown error'}`\n+      );\n     }\n   }\n }\n"
                }
            ],
            "date": 1754493656541,
            "name": "Commit-0",
            "content": "import { HttpAdapter, HttpRequest, HttpResponse } from '../types/oauth-core';\n\n/**\n * Web HTTP adapter using fetch API\n * Implements the HttpAdapter interface for browser environments\n */\nexport class WebHttpAdapter implements HttpAdapter {\n  async request(request: HttpRequest): Promise<HttpResponse> {\n    try {\n      const response = await fetch(request.url, {\n        method: request.method,\n        headers: request.headers,\n        body: request.body,\n      });\n\n      const data = await response.json().catch(() => ({}));\n\n      return {\n        status: response.status,\n        statusText: response.statusText,\n        headers: Object.fromEntries(response.headers.entries()),\n        data,\n        ok: response.ok,\n      };\n    } catch (error) {\n      throw new Error(`Network request failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n"
        }
    ]
}