{
    "sourceFile": "src/types/oauth-core.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1754493832705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1754493832705,
            "name": "Commit-0",
            "content": "// Temporary type definitions for @zestic/oauth-core\n// These will be replaced when the actual package is available\n\nexport interface OAuthConfig {\n  clientId: string;\n  endpoints: {\n    authorization: string;\n    token: string;\n    revocation: string;\n  };\n  redirectUri: string;\n  scopes: string[];\n}\n\nexport interface OAuthTokens {\n  accessToken: string;\n  refreshToken?: string;\n  expiresIn?: number;\n  tokenType?: string;\n}\n\nexport interface StorageAdapter {\n  setItem(key: string, value: string): Promise<void>;\n  getItem(key: string): Promise<string | null>;\n  removeItem(key: string): Promise<void>;\n  removeItems(keys: string[]): Promise<void>;\n}\n\nexport interface HttpRequest {\n  url: string;\n  method: string;\n  headers?: Record<string, string>;\n  body?: string;\n}\n\nexport interface HttpResponse {\n  status: number;\n  statusText: string;\n  headers: Record<string, string>;\n  data: unknown;\n  ok: boolean;\n}\n\nexport interface HttpAdapter {\n  request(request: HttpRequest): Promise<HttpResponse>;\n}\n\nexport interface PKCEParams {\n  codeVerifier: string;\n  codeChallenge: string;\n  codeChallengeMethod: string;\n  state: string;\n}\n\nexport interface PKCEAdapter {\n  generatePKCE(): Promise<PKCEParams>;\n  validateState(storedState: string, receivedState: string): Promise<boolean>;\n}\n\n// Base OAuth adapter class (placeholder)\nexport class OAuthAdapter {\n  constructor(\n    protected config: OAuthConfig,\n    protected storageAdapter: StorageAdapter,\n    protected httpAdapter: HttpAdapter,\n    protected pkceAdapter: PKCEAdapter\n  ) {}\n\n  async getAuthorizationUrl(): Promise<string> {\n    // Placeholder implementation\n    return `${this.config.endpoints.authorization}?client_id=${this.config.clientId}&redirect_uri=${this.config.redirectUri}`;\n  }\n}\n"
        }
    ]
}